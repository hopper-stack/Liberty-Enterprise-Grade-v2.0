#!/bin/bash

:<<'hopper-stack-notice'

Copyright 2015 Hopper-Stack

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

hopper-stack-notice

# +------------------------------------------+
# | VARIABLES                                |
# +------------------------------------------+
if [ ! -f variables ]; then
   echo
   echo " +-----------------------------------------+"
   echo " |  variables file not in this directory   |"
   echo " +-----------------------------------------+"
   echo
   echo; exit
fi

ENABLE_GLUSTER=False
ENABLE_NAGIOS=False
ENABLE_GLUSTER=False
ENABLE_LVM=False
ENABLE_BLOCK=False
ENABLE_AMANDA=False
ENABLE_LOGSTASH=False
installdir=/install_dir
curdir=`pwd`
source variables

if [ x$STACKNAME == xhopper-stack ]; then
   Hopper=True
fi

# +------------------------------------------+
# | ENABLE SSH                               |
# +------------------------------------------+
rm -rf /tmp/listing
echo "" > /tmp/yes
echo "" >> /tmp/yes
ssh-keygen -N "" < /tmp/yes

# haproxy
declare -a arr1=(`cat $curdir/variables  | grep ^HAPROXY[0-9]IP | awk -F= '{print $2}'`)
for j in ${arr1[@]}; do
   ssh-copy-id -i ~/.ssh/id_rsa.pub root@$j
   echo $j >> /tmp/listing
done

# controller
declare -a arr1=(`cat $curdir/variables  | grep ^CONTRL[0-9]IP | awk -F= '{print $2}'`)
for j in ${arr1[@]}; do
   ssh-copy-id -i ~/.ssh/id_rsa.pub root@$j
   echo $j >> /tmp/listing
done

# swift
declare -a arr1=(`cat $curdir/variables  | grep ^STORAGE[0-9]IP | awk -F= '{print $2}'`)
for j in ${arr1[@]}; do
   ssh-copy-id -i ~/.ssh/id_rsa.pub root@$j
   echo $j >> /tmp/listing
done

# neutron
declare -a arr1=(`cat $curdir/variables  | grep ^NETWORK[0-9]IP | awk -F= '{print $2}'`)
for j in ${arr1[@]}; do
   ssh-copy-id -i ~/.ssh/id_rsa.pub root@$j
   echo $j >> /tmp/listing
done

# nova
COMPSTORAGE1IP=$COMPUTE1IP
COMPSTORAGE2IP=$COMPUTE2IP
COMPSTORAGE3IP=$COMPUTE3IP
COMPSTORAGE4IP=$COMPUTE4IP
COMPSTORAGE5IP=$COMPUTE5IP
COMPSTORAGE6IP=$COMPUTE6IP
COMPSTORAGE7IP=$COMPUTE7IP
COMPSTORAGE8IP=$COMPUTE8IP
COMPSTORAGE9IP=$COMPUTE9IP
declare -a arr1=(`cat $curdir/variables  | grep ^COMPUTE[0-9]IP | awk -F= '{print $2}'`)
for j in ${arr1[@]}; do
   ssh-copy-id -i ~/.ssh/id_rsa.pub root@$j
   echo $j >> /tmp/listing
done

# repository
ckfile=`cat /tmp/listing | grep $FILESERVER`
if [ x$ckfile == x ]; then
   ssh-copy-id -i ~/.ssh/id_rsa.pub root@$FILESERVER
   echo $FILESERVER >> /tmp/listing
fi

# squid 
if [ x$ENABLE_SQUID == xTrue ]; then
   ckfile=`cat /tmp/listing | grep $SQUIDDSERVERIP`
   if [ x$ckfile == x ]; then
      ssh-copy-id -i ~/.ssh/id_rsa.pub root@$SQUIDDSERVERIP
      echo $SQUIDDSERVERIP >> /tmp/listing
   fi
fi

# backup
if [ x$ENABLE_AMANDA == xTrue ]; then
   ckfile=`cat /tmp/listing | grep $BCKUPSERVER`
   if [ x$ckfile == x ]; then
      ssh-copy-id -i ~/.ssh/id_rsa.pub root@$BCKUPSERVER
      echo $BCKUPSERVER >> /tmp/listing
   fi
fi

# DNS
if [ x$ENABLE_DNS == xTrue ]; then
   ckfile=`cat /tmp/listing | grep $DNSSERVERIP`
   if [ x$ckfile == x ]; then
      ssh-copy-id -i ~/.ssh/id_rsa.pub root@$DNSSERVERIP
      echo $DNSSERVERIP >> /tmp/listing
   fi
fi

# monitoring
if [ x$ENABLE_NAGIOS == xTrue ]; then
   ckfile=`cat /tmp/listing | grep $NAGIOSSERVER`
   if [ x$ckfile == x ]; then
      ssh-copy-id -i ~/.ssh/id_rsa.pub root@$NAGIOSSERVER
      echo $NAGIOSSERVER >> /tmp/listing
   fi
fi

# logstash
if [ x$ENABLE_LOGSTASH == xTrue ]; then
   ckfile=`cat /tmp/listing | grep $LOGSTASHIP`
   if [ x$ckfile == x ]; then
      ssh-copy-id -i ~/.ssh/id_rsa.pub root@$LOGSTASHIP
      echo $LOGSTASHIP >> /tmp/listing
   fi
fi

# +------------------------------------------+
# | GENERATE KEYS                            |
# +------------------------------------------+
rm -f $curdir/ssh-key /root/.ssh/authorized_keys ssh-key ssh-key.pub
ssh-keygen -N "" -f ssh-key

chmod 600 $curdir/ssh-key
cat ssh-key.pub > /root/.ssh/authorized_keys

# haproxy
declare -a arr1=(`cat $curdir/variables  | grep ^HAPROXY[0-9]IP | awk -F= '{print $2}'`)
for j in ${arr1[@]}; do
   ssh $j mkdir -p $installdir
   scp -o StrictHostKeyChecking=no $curdir/ssh-key $j:$installdir
   scp -o StrictHostKeyChecking=no $curdir/ssh-key.pub $j:/root/.ssh/authorized_keys
   ssh -i $curdir/ssh-key $j chmod 600 $installdir/ssh-key
done

# sontroller
declare -a arr1=(`cat $curdir/variables  | grep ^CONTRL[0-9]IP | awk -F= '{print $2}'`)
for j in ${arr1[@]}; do
   ssh $j mkdir -p $installdir
   scp -o StrictHostKeyChecking=no $curdir/ssh-key $j:$installdir
   scp -o StrictHostKeyChecking=no $curdir/ssh-key.pub $j:/root/.ssh/authorized_keys
   ssh -i $curdir/ssh-key $j chmod 600 $installdir/ssh-key
done

# neutron
declare -a arr1=(`cat $curdir/variables  | grep ^NETWORK[0-9]IP | awk -F= '{print $2}'`)
for j in ${arr1[@]}; do
   ssh $j mkdir -p $installdir
   scp -o StrictHostKeyChecking=no $curdir/ssh-key $j:$installdir
   scp -o StrictHostKeyChecking=no $curdir/ssh-key.pub $j:/root/.ssh/authorized_keys
   ssh -i $curdir/ssh-key $j chmod 600 $installdir/ssh-key
done

# swift
declare -a arr1=(`cat $curdir/variables  | grep ^STORAGE[0-9]IP | awk -F= '{print $2}'`)
for j in ${arr1[@]}; do
   ssh $j mkdir -p $installdir
   scp -o StrictHostKeyChecking=no $curdir/ssh-key $j:$installdir
   scp -o StrictHostKeyChecking=no $curdir/ssh-key.pub $j:/root/.ssh/authorized_keys
   ssh -i $curdir/ssh-key $j chmod 600 $installdir/ssh-key
done

# nova
declare -a arr2=(`cat $curdir/variables  | grep ^COMPUTE[0-9]IP | awk -F= '{print $2}'`)
for j in ${arr2[@]}; do
   ssh $j mkdir -p $installdir
   scp -o StrictHostKeyChecking=no $curdir/ssh-key $j:$installdir
   scp -o StrictHostKeyChecking=no $curdir/ssh-key.pub $j:/root/.ssh/authorized_keys
   ssh -i $curdir/ssh-key $j chmod 600 $installdir/ssh-key
done

# repository
ssh $FILESERVER mkdir -p $installdir
scp -o StrictHostKeyChecking=no $curdir/ssh-key $FILESERVER:$installdir
scp -o StrictHostKeyChecking=no $curdir/ssh-key.pub $FILESERVER:/root/.ssh/authorized_keys
ssh -i $curdir/ssh-key $FILESERVER chmod 600 $installdir/ssh-key

# squid
if [ x$ENABLE_SQUID == xTrue ]; then
   ssh $SQUIDDSERVERIP mkdir -p $installdir
   scp -o StrictHostKeyChecking=no $curdir/ssh-key $SQUIDDSERVERIP:$installdir
   scp -o StrictHostKeyChecking=no $curdir/ssh-key.pub $SQUIDDSERVERIP:/root/.ssh/authorized_keys
   ssh -i $curdir/ssh-key $SQUIDDSERVERIP chmod 600 $installdir/ssh-key
fi

# backup
if [ x$ENABLE_AMANDA == xTrue ]; then
      ssh $BCKUPSERVER mkdir -p $installdir
      scp -o StrictHostKeyChecking=no $curdir/ssh-key $BCKUPSERVER:$installdir
      scp -o StrictHostKeyChecking=no $curdir/ssh-key.pub $BCKUPSERVER:/root/.ssh/authorized_keys
      ssh -i $curdir/ssh-key $BCKUPSERVER chmod 600 $installdir/ssh-key
fi

# monitoring
if [ x$ENABLE_NAGIOS == xTrue ]; then
   ckfile=`cat /tmp/listing | grep $NAGIOSSERVER`
   if [ x$ckfile == x ]; then
      ssh $NAGIOSSERVER mkdir -p $installdir
      scp -o StrictHostKeyChecking=no $curdir/ssh-key $NAGIOSSERVER:$installdir
      scp -o StrictHostKeyChecking=no $curdir/ssh-key.pub $NAGIOSSERVER:/root/.ssh/authorized_keys
      ssh -i $curdir/ssh-key $NAGIOSSERVER chmod 600 $installdir/ssh-key
   fi
fi

# DNS
if [ x$ENABLE_DNS == xTrue ]; then
   ckfile=`cat /tmp/listing | grep $DNSSERVERIP`
   if [ x$ckfile == x ]; then
      ssh $DNSSERVERIP mkdir -p $installdir
      scp -o StrictHostKeyChecking=no $curdir/ssh-key $DNSSERVERIP:$installdir
      scp -o StrictHostKeyChecking=no $curdir/ssh-key.pub $DNSSERVERIP:/root/.ssh/authorized_keys
      ssh -i $curdir/ssh-key $DNSSERVERIP chmod 600 $installdir/ssh-key
   fi
fi

# logstash
if [ x$ENABLE_LOGSTASH == xTrue ]; then
   ssh $LOGSTASHIP mkdir -p $installdir
   scp -o StrictHostKeyChecking=no $curdir/ssh-key $LOGSTASHIP:$installdir
   scp -o StrictHostKeyChecking=no $curdir/ssh-key.pub $LOGSTASHIP:/root/.ssh/authorized_keys
   ssh -i $curdir/ssh-key $LOGSTASHIP chmod 600 $installdir/ssh-key
fi

# +------------------------------------------+
# | DISTRIBUTE FILES                         |
# +------------------------------------------+
# haproxy
DIR="ha"
echo "+------------------------------------------+"
echo "| HA Proxy                                 |"
echo "+------------------------------------------+"
scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/ha1-profile $HAPROXY1IP:$installdir/profile
scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/haproxy $HAPROXY1IP:$installdir/haproxy
scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/ntpserver $HAPROXY1IP:$installdir/ntpserver
scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/ha2-profile $HAPROXY2IP:$installdir/profile
scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/haproxy $HAPROXY2IP:$installdir/haproxy

# apps
DIR="apps"
scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/patch-client* $HAPROXY1IP:$installdir
scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/patch-client* $HAPROXY2IP:$installdir
if [ x$ENABLE_CLAMAV == xTrue ]; then
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/clamav* $HAPROXY1IP:$installdir
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/clamav* $HAPROXY2IP:$installdir
fi
if [ x$ENABLE_LDAP == xTrue ]; then
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/ldap-client $HAPROXY1IP:$installdir
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/ldap-server-profile $HAPROXY1IP:$installdir
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/ldap-client $HAPROXY2IP:$installdir
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/ldap-server-profile $HAPROXY2IP:$installdir
fi
if [ x$ENABLE_NAGIOS == xTrue ]; then
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/nagios-client $HAPROXY1IP:$installdir
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/nagios-client $HAPROXY2IP:$installdir
fi
if [ x$ENABLE_AMANDA == xTrue ]; then
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/amanda-client $HAPROXY1IP:$installdir
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/amanda-client $HAPROXY2IP:$installdir
fi
if [ x$ENABLE_DNS == xTrue ]; then
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/dns-client $HAPROXY1IP:$installdir
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/dns-client $HAPROXY2IP:$installdir
fi
if [ x$ENABLE_LOGSTASH == xTrue ]; then
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/logstash-client $HAPROXY1IP:$installdir
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/logstash-client $HAPROXY2IP:$installdir
fi
echo

# controller
echo "+------------------------------------------+"
echo "| Controller                               |"
echo "+------------------------------------------+"
count=1
declare -a arr3=(`cat $curdir/variables  | grep ^CONTRL[0-9]IP | awk -F= '{print $2}'`)
for j in ${arr3[@]}; do
   DIR="api"
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/api${count}-profile $j:$installdir/profile
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/controller $j:$installdir/controller
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/hopper.png $j:$installdir
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/frontpage.png $j:$installdir
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/favicon.ico $j:$installdir
   if [ "$count" -eq "1" ]; then
      scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/install-hopper $j:$installdir/install-hopper
      scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${curdir}/variables $j:$installdir/variables
      scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/verify-hopper $j:$installdir/verify-hopper
      scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/add-loadbalancer $j:$installdir/add-loadbalancer
      scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/add-project $j:$installdir
      scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/tunnel-subnet $j:$installdir/tunnel-subnet
      scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/vlan-subnet $j:$installdir/vlan-subnet
   fi
   DIR="apps"
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/patch-client* $j:$installdir
   if [ x$ENABLE_CLAMAV == xTrue ]; then
      scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/clamav* $j:$installdir
   fi
   if [ "$count" -eq "1" ]; then
      scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/keepass-server $j:$installdir
      scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/keepass-server-profile $j:$installdir
   fi
   if [ x$ENABLE_LDAP == xTrue ]; then
      scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/ldap-client $j:$installdir
      scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/ldap-server-profile $j:$installdir
   fi
   if [ x$ENABLE_NAGIOS == xTrue ]; then
      scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/nagios-client $j:$installdir
   fi
   if [ x$ENABLE_AMANDA == xTrue ]; then
      scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/amanda-client $j:$installdir
   fi
   if [ x$ENABLE_DNS == xTrue ]; then
      scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/dns-client $j:$installdir
   fi
   if [ x$ENABLE_LOGSTASH == xTrue ]; then
      scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/logstash-client $j:$installdir
   fi
   let count=count+1
done
echo

# swift
echo "+------------------------------------------+"
echo "| Storage                                  |"
echo "+------------------------------------------+"
count=1
declare -a arr3=(`cat $curdir/variables  | grep ^STORAGE[0-9]IP | awk -F= '{print $2}'`)
for j in ${arr3[@]}; do
   DIR="swift"
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/swift${count}-profile $j:$installdir/profile
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/storage $j:$installdir/storage
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/build-ring $j:$installdir/build-ring

   DIR="apps"
   scp -o StrictHostKeyChecking=no -i ssh-key ${DIR}/patch-client* $j:$installdir
   if [ x$ENABLE_CLAMAV == xTrue ]; then
      scp -o StrictHostKeyChecking=no -i ssh-key ${DIR}/clamav* $j:$installdir
   fi
   if [ x$ENABLE_LDAP == xTrue ]; then
      scp -o StrictHostKeyChecking=no -i ssh-key ${DIR}/ldap-client $j:$installdir
      scp -o StrictHostKeyChecking=no -i ssh-key ${DIR}/ldap-server-profile $j:$installdir
   fi
   if [ x$ENABLE_NAGIOS == xTrue ]; then
      scp -o StrictHostKeyChecking=no -i ssh-key ${DIR}/nagios-client $j:$installdir
   fi
   if [ x$ENABLE_AMANDA == xTrue ]; then
      scp -o StrictHostKeyChecking=no -i ssh-key ${DIR}/amanda-client $j:$installdir
   fi
   if [ x$ENABLE_DNS == xTrue ]; then
      scp -o StrictHostKeyChecking=no -i ssh-key ${DIR}/dns-client $j:$installdir
   fi
   if [ x$ENABLE_LOGSTASH == xTrue ]; then
      scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/logstash-client $j:$installdir
   fi
   let count=count+1
done
echo

# nova
echo "+------------------------------------------+"
echo "| Compute                                  |"
echo "+------------------------------------------+"
count=1
declare -a arr4=(`cat $curdir/variables  | grep ^COMPUTE[0-9]IP | awk -F= '{print $2}'`)
for j in ${arr4[@]}; do
   DIR="nova"
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/nova${count}-profile $j:$installdir/profile
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/compute $j:$installdir/compute
   DIR="apps"
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/patch-client* $j:$installdir
   if [ x$ENABLE_CLAMAV == xTrue ]; then
      scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/clamav* $j:$installdir
   fi
   if [ x$ENABLE_LDAP == xTrue ]; then
      scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/ldap-client $j:$installdir
      scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/ldap-server-profile $j:$installdir
   fi
   if [ x$ENABLE_NAGIOS == xTrue ]; then
      scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/nagios-client $j:$installdir
   fi
   if [ x$ENABLE_AMANDA == xTrue ]; then
      scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/amanda-client $j:$installdir
   fi
   if [ x$ENABLE_DNS == xTrue ]; then
      scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/dns-client $j:$installdir
   fi
   if [ x$ENABLE_LOGSTASH == xTrue ]; then
      scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/logstash-client $j:$installdir
   fi
   let count=count+1
done
echo

# neutron
echo "+------------------------------------------+"
echo "| Network                                  |"
echo "+------------------------------------------+"
count=1
declare -a arr4=(`cat $curdir/variables  | grep ^NETWORK[0-9]IP | awk -F= '{print $2}'`)
for j in ${arr4[@]}; do
   DIR="neutron"
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/neutron${count}-profile $j:$installdir/profile
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/network $j:$installdir
   DIR="apps"
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/patch-client* $j:$installdir
   if [ x$ENABLE_CLAMAV == xTrue ]; then
      scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/clamav* $j:$installdir
   fi
   if [ x$ENABLE_LDAP == xTrue ]; then
      scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/ldap-client $j:$installdir
      scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/ldap-server-profile $j:$installdir
   fi
   if [ x$ENABLE_NAGIOS == xTrue ]; then
      scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/nagios-client $j:$installdir
   fi
   if [ x$ENABLE_AMANDA == xTrue ]; then
      scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/amanda-client $j:$installdir
   fi
   if [ x$ENABLE_DNS == xTrue ]; then
      scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/dns-client $j:$installdir
   fi
   if [ x$ENABLE_LOGSTASH == xTrue ]; then
      scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/logstash-client $j:$installdir
   fi
   let count=count+1
done
echo

# LVM
if [ x$ENABLE_LVM == xTrue ]; then
   echo "+------------------------------------------+"
   echo "| LVM                                      |"
   echo "+------------------------------------------+"
   DIR="cinder"
   count=1
   declare -a arr6=(`cat $curdir/variables  | grep ^COMPUTE[0-9]IP | awk -F= '{print $2}'`)
   for j in ${arr6[@]}; do
      if [ -f ${DIR}/lvm${count}-profile ]; then
         scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/lvm${count}-profile $j:$installdir/lvm-profile
         scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/lvm-volume $j:$installdir/lvm-volume
      fi
      let count=count+1
   done
   echo
fi

# BLOCK
if [ x$ENABLE_BLOCK == xTrue ]; then
   echo "+------------------------------------------+"
   echo "| BLOCK                                    |"
   echo "+------------------------------------------+"
   DIR="cinder"
   count=1
   declare -a arr6=(`cat $curdir/variables  | grep ^COMPUTE[0-9]IP | awk -F= '{print $2}'`)
   for j in ${arr6[@]}; do
      if [ -f ${DIR}/block${count}-profile ]; then
         scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/block${count}-profile $j:$installdir/block-profile
         scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/block-volume $j:$installdir/block-volume
      fi
      let count=count+1
   done
   echo
fi

# gluster
if [ x$ENABLE_GLUSTER == xTrue ]; then
   echo "+------------------------------------------+"
   echo "| Gluster                                  |"
   echo "+------------------------------------------+"
   count=1
   declare -a arr7=(`cat $curdir/variables  | grep ^COMPUTE[0-9]IP | awk -F= '{print $2}'`)
   for j in ${arr7[@]}; do
      DIR="cinder"
      if [ -f ${DIR}/add-gluster${count}-profile ]; then
         scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/add-gluster${count}-profile $j:$installdir/add-gluster-profile
         scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/add-gluster $j:$installdir/add-gluster
         DIR="apps"
         scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/patch-client* $j:$installdir
         if [ x$ENABLE_CLAMAV == xTrue ]; then
           scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/clamav* $j:$installdir
         fi
         if [ x$ENABLE_LDAP == xTrue ]; then
           scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/ldap-client $j:$installdir
           scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/ldap-server-profile $j:$installdir
         fi
         if [ x$ENABLE_NAGIOS == xTrue ]; then
           scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/nagios-client $j:$installdir
         fi
         if [ x$ENABLE_AMANDA == xTrue ]; then
           scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/amanda-client $j:$installdir
         fi
         if [ x$ENABLE_DNS == xTrue ]; then
           scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/dns-client $j:$installdir
         fi
         if [ x$ENABLE_LOGSTASH == xTrue ]; then
            scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/logstash-client $j:$installdir
         fi
      fi
      let count=count+1
   done

   # gluster #1
   DIR="cinder"
   TMPK=`cat $curdir/variables  | grep ^FIRST_GLUSTER_NODE | awk -F= '{print $2}'`
   eval FNODE=$TMPK
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/create-volume-profile $FNODE:$installdir/create-volume-profile
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/gluster-volume $FNODE:$installdir/gluster-volume
   echo
fi

# backup
if [ x$ENABLE_AMANDA == xTrue ]; then
   echo "+------------------------------------------+"
   echo "| Amanda Backup                            |"
   echo "+------------------------------------------+"
   DIR="apps"
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/amanda-profile $BCKUPSERVER:$installdir/amanda-profile
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/amanda-server $BCKUPSERVER:$installdir/amanda-server
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/patch-client* $BCKUPSERVER:$installdir
   if [ x$ENABLE_CLAMAV == xTrue ]; then
      scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/clamav* $BCKUPSERVER:$installdir
   fi
   if [ x$ENABLE_LDAP == xTrue ]; then
      scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/ldap-client $BCKUPSERVER:$installdir
      scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/ldap-server-profile $BCKUPSERVER:$installdir
   fi
   echo
fi

# repository 
echo "+------------------------------------------+"
echo "| Repository                               |"
echo "+------------------------------------------+"
DIR="apps"
scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/patch-server-profile $FILESERVER:$installdir/patch-server-profile
scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/patch-server $FILESERVER:$installdir/patch-server
if [ x$ENABLE_CLAMAV == xTrue ]; then
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/clamav* $FILESERVER:$installdir
fi
if [ x$ENABLE_LDAP == xTrue ]; then
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/ldap-client $FILESERVER:$installdir
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/ldap-server-profile $FILESERVER:$installdir
fi
echo

# DNS
if [ x$ENABLE_DNS == xTrue ]; then
   echo "+------------------------------------------+"
   echo "| DNS Server                               |"
   echo "+------------------------------------------+"
   DIR="apps"
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/dns-server-profile $DNSSERVERIP:$installdir/dns-server-profile
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/dns-server $DNSSERVERIP:$installdir/dns-server
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/clamav* $DNSSERVERIP:$installdir
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/ldap* $DNSSERVERIP:$installdir
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/patch-client* $DNSSERVERIP:$installdir
   echo
fi

# squid
if [ x$ENABLE_SQUID == xTrue ]; then
   echo "+------------------------------------------+"
   echo "| Squid Server                             |"
   echo "+------------------------------------------+"
   DIR="apps"
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/squid-server-profile $SQUIDDSERVERIP:$installdir/squid-server-profile
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/squid-server $SQUIDDSERVERIP:$installdir/squid-server
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/clamav* $SQUIDDSERVERIP:$installdir
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/ldap-client $SQUIDDSERVERIP:$installdir
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/ldap-server-profile $SQUIDDSERVERIP:$installdir
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/patch-client* $SQUIDDSERVERIP:$installdir
   echo
fi

# monitoring
if [ x$ENABLE_NAGIOS == xTrue ]; then
   echo "+------------------------------------------+"
   echo "| Nagios Monitoring                        |"
   echo "+------------------------------------------+"
   DIR="apps"
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/nagios-server $NAGIOSSERVER:$installdir/nagios-server
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/nagios-server-profile $NAGIOSSERVER:$installdir/nagios-server-profile
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/patch-client* $NAGIOSSERVER:$installdir
   if [ x$ENABLE_CLAMAV == xTrue ]; then
      scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/clamav* $NAGIOSSERVER:$installdir
   fi
   if [ x$ENABLE_LDAP == xTrue ]; then
      scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/ldap-client $NAGIOSSERVER:$installdir
      scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/ldap-server-profile $NAGIOSSERVER:$installdir
   fi
   echo
fi

# logstash
if [ x$ENABLE_LOGSTASH == xTrue ]; then
   echo "+------------------------------------------+"
   echo "| Logstash Server                          |"
   echo "+------------------------------------------+"
   DIR="apps"
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/logstash-server $LOGSTASHIP:$installdir/logstash-server
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/logstash-server-profile $LOGSTASHIP:$installdir/logstash-server-profile
   scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/patch-client* $LOGSTASHIP:$installdir
   if [ x$ENABLE_CLAMAV == xTrue ]; then
      scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/clamav* $LOGSTASHIP:$installdir
   fi
   if [ x$ENABLE_LDAP == xTrue ]; then
      scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/ldap-client $LOGSTASHIP:$installdir
      scp -o StrictHostKeyChecking=no -i $curdir/ssh-key ${DIR}/ldap-server-profile $LOGSTASHIP:$installdir
   fi
   echo
fi

# +------------------------------------------+
# | CLEAN UP                                 |
# +------------------------------------------+
rm -f /tmp/yes
rm -f /tmp/listing
rm -f $curdir/ssh-key $curdir/ssh-key.pub

